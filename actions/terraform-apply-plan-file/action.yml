name: terraform-apply
description: Executes 'terraform apply' using the plan file and captures a summary to post to the pull request.
author: tgharold
branding:
  icon: 'download-cloud'  
  color: 'gray-dark'

inputs:

  artifact_filename:
    required: true

  artifact_filepath:
    required: true

  detail_summary_lines: 
    description: The maximum number of lines included in the detail summary block.  This keeps the GitHub PR comment and any GitHub notification emails from becoming too large.
    required: false
    default: 100

  github_event_name:
    required: true

  plan_file_name: 
    required: false
    default: terraform.tfplan

  rimbot_registry_access_key:
    description: The Azure table storage account access key for RIMbot (rimlogsdevrimbot).  This value is passed into our Terraform inputs so that RIMbot can write the Azure Web App information into an Azure Storage Table.  It only matters for Terraform plan/apply cycles where we are using that Powershell script.
    required: false

  workflow_run_title: 
    required: true

  working_directory: 
    required: true

  working_directory_name:
    required: true

# https://dev.to/github/the-githubtoken-in-github-actions-how-it-works-change-permissions-customizations-3cgp

runs:
  using: "composite"

  steps:

    - name: Validate inputs.artifact_filename
      uses: ritterim/public-github-actions/actions/file-name-validator@v1.17
      with:
        file_name: ${{ inputs.artifact_filename }}

    - name: Validate inputs.artifact_filepath
      uses: ritterim/public-github-actions/actions/file-path-name-validator@v1.17
      with:
        file_path_name: ${{ inputs.artifact_filepath }}

    - name: Validate inputs.detail_summary_lines
      uses: ritterim/public-github-actions/actions/regex-validator@v1.17
      with:
        value: ${{ inputs.detail_summary_lines }}
        regex_pattern: '^([0-9]{1,6})$'

    - name: Validate inputs.working_directory
      uses: ritterim/public-github-actions/actions/path-name-validator@v1.17
      with:
        path_name: ${{ inputs.working_directory }}

    - name: Validate inputs.working_directory_name
      uses: ritterim/public-github-actions/actions/file-name-validator@v1.17
      with:
        file_name: ${{ inputs.working_directory_name }}

    - name: Validate inputs.plan_file_name
      uses: ritterim/public-github-actions/actions/file-name-validator@v1.17
      with:
        file_name: ${{ inputs.plan_file_name }}

    - name: Set environment variables
      shell: bash
      env:
        APPLYSUMMARYFILENAME: "${{ inputs.artifact_filename }}-apply-summary.txt"
        ARTIFACT_FILENAME: ${{ inputs.artifact_filename }}
        ARTIFACT_NAME: "${{ inputs.artifact_filename }}-plan-apply"
        DEFAULTCONTENT: "No output captured.  See GitHub Actions runs in the repository."
        HEADLINES: ${{ inputs.detail_summary_lines }}
        OUTPUTJSONFILENAME: "${{ inputs.artifact_filename }}-output.json"
        PLANFILENAME: ${{ inputs.plan_file_name }}
        RAWSTDERRFILE: "${{ inputs.artifact_filename }}-apply-stderr.raw"
        RAWSTDOUTFILE: "${{ inputs.artifact_filename }}-apply-stdout.raw"
        STDERRFILE: "${{ inputs.artifact_filename }}-apply-stderr.txt"
        STDOUTFILE: "${{ inputs.artifact_filename }}-apply-stdout.txt"
        TF_VAR_RIMBOT_REGISTRY_ACCESS_KEY: ${{ inputs.rimbot_registry_access_key }}
        WORKING_DIRECTORY: ${{ inputs.working_directory }}
      run: |
        echo "APPLYSUMMARYFILENAME=$APPLYSUMMARYFILENAME" >> "$GITHUB_ENV"
        echo "ARTIFACT_FILENAME=$ARTIFACT_FILENAME" >> "$GITHUB_ENV"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"
        echo "DEFAULTCONTENT=$DEFAULTCONTENT" >> "$GITHUB_ENV"
        echo "HEADLINES=$HEADLINES" >> "$GITHUB_ENV"
        echo "OUTPUTJSONFILENAME=$OUTPUTJSONFILENAME" >> "$GITHUB_ENV"
        echo "PLANFILENAME=$PLANFILENAME" >> "$GITHUB_ENV"
        echo "RAWSTDERRFILE=$RAWSTDERRFILE" >> "$GITHUB_ENV"
        echo "RAWSTDOUTFILE=$RAWSTDOUTFILE" >> "$GITHUB_ENV"
        echo "STDERRFILE=$STDERRFILE" >> "$GITHUB_ENV"
        echo "STDOUTFILE=$STDOUTFILE" >> "$GITHUB_ENV"
        echo "::add-mask::${TF_VAR_RIMBOT_REGISTRY_ACCESS_KEY}"
        echo "TF_VAR_RIMBOT_REGISTRY_ACCESS_KEY=$TF_VAR_RIMBOT_REGISTRY_ACCESS_KEY" >> "$GITHUB_ENV"
        echo "WORKING_DIRECTORY=$WORKING_DIRECTORY" >> "$GITHUB_ENV"

    - name: Initialize artifact files
      shell: bash
      run: |
        set -o pipefail
        echo "${DEFAULTCONTENT}" > "${RAWSTDERRFILE}"
        echo "${DEFAULTCONTENT}" > "${STDERRFILE}"
        echo "${DEFAULTCONTENT}" > "${RAWSTDOUTFILE}"
        echo "${DEFAULTCONTENT}" > "${STDOUTFILE}"

    - name: Terraform Apply
      id: apply
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -o pipefail
        terraform apply -auto-approve -input=false "${PLANFILENAME}" | tee "${RAWSTDOUTFILE}"
      continue-on-error: true
    
    - name: Clean stdout file
      # removes ANSI terminal color coding from the file
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -o pipefail
        sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
          < "${RAWSTDOUTFILE}" \
          > "${STDOUTFILE}"

    - name: Create Terraform Apply Output Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_filename }}-apply-stdout
        path: ${{ inputs.artifact_filepath }}-apply-stdout.txt
        if-no-files-found: error        

# NOTE: I'm not sure we can reliably capture stderr and still have all the lines 
# output in the same ordering within the GitHub Actions UI.  So we're not going to.
# We'll pull it from the wrapper script, if possible.  If it's too large, this step
# will just quietly fail.

    - name: Capture Terraform Apply Error Output to File
      if: steps.apply.outcome == 'failure'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -o pipefail
        cat > "${RAWSTDERRFILE}" << 'TFAPPLYOUTPUTEOF'
        ${{ steps.apply.outputs.stderr }}
        TFAPPLYOUTPUTEOF
      continue-on-error: true

    - name: Clean stderr file
      # removes ANSI terminal color coding from the file
      if: steps.apply.outcome == 'failure'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -o pipefail
        sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
          < "${RAWSTDERRFILE}" \
          > "${STDERRFILE}"

    - name: Create Terraform Apply Error Output Artifact
      uses: actions/upload-artifact@v4
      if: steps.apply.outcome == 'failure'
      with:
        name: ${{ inputs.artifact_filename }}-apply-stderr
        path: ${{ inputs.artifact_filepath }}-apply-stderr.txt
        if-no-files-found: error        

    - name: Parse out the Apply Summary Line
      id: apply-summary
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: grep -e '^Apply complete!' -e '\[ERROR\]' "${STDOUTFILE}" > "${APPLYSUMMARYFILENAME}"

    - name: Create Terraform Apply Summary Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_filename }}-apply-summary
        path: ${{ inputs.artifact_filepath }}-apply-summary.txt
        if-no-files-found: error        

    - name: Populate APPLY_SUMMARY
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64 | tr -dc A-Za-z0-9)
        echo "APPLY_SUMMARY<<$EOF" >> "$GITHUB_ENV"
        grep -v '\:\:debug\:\:' "${APPLYSUMMARYFILENAME}" | head -n 5 >> "$GITHUB_ENV"
        echo "$EOF" >> "$GITHUB_ENV"

    - name: Populate DETAIL_SUMMARY_CONTENT
      if: steps.apply.outcome == 'failure'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64 | tr -dc A-Za-z0-9)
        echo "DETAIL_SUMMARY_CONTENT<<$EOF" >> "$GITHUB_ENV"
        grep -v '\:\:debug\:\:' "${STDERRFILE}" | head -n ${HEADLINES} >> "$GITHUB_ENV"
        echo "$EOF" >> "$GITHUB_ENV"

    - name: Report on Terraform Apply Failure to GitHub PR
      uses: actions/github-script@v6
      if: steps.apply.outcome == 'failure'
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const output = `### ðŸš¨ Terraform Apply (${{ inputs.working_directory_name }}) ðŸš¨ \`${{ steps.apply.outcome }}\` ðŸš¨
          Workflow Run: ${{ inputs.workflow_run_title }}
          *Pushed by: @${{ github.actor }}, Action: \`${{ inputs.github_event_name }}\`*
          Summary:\n
          ${process.env.APPLY_SUMMARY}\n
          \n
          <details><summary>Show Errors (only first ${{ inputs.detail_summary_lines }} lines displayed)</summary>\n
          \`\`\`\n
          ${process.env.DETAIL_SUMMARY_CONTENT}
          \`\`\`\n
          </details>\n
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Populate DETAIL_SUMMARY_CONTENT
      if: steps.apply.outcome == 'success'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64 | tr -dc A-Za-z0-9)
        echo "DETAIL_SUMMARY_CONTENT<<$EOF" >> "$GITHUB_ENV"
        grep -v '\:\:debug\:\:' "${STDOUTFILE}" | grep -v '\[command\]' | head -n ${HEADLINES} >> "$GITHUB_ENV"
        echo "$EOF" >> "$GITHUB_ENV"

    - name: Report on Terraform Apply Success to GitHub PR
      uses: actions/github-script@v6
      if: steps.apply.outcome == 'success'
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const output = `### âœ… Terraform Apply (${{ inputs.working_directory_name }}) âœ… \`${{ steps.apply.outcome }}\` âœ…
          Workflow Run: ${{ inputs.workflow_run_title }}
          *Pushed by: @${{ github.actor }}, Action: \`${{ inputs.github_event_name }}\`*
          \n
          Summary:\n
          ${process.env.APPLY_SUMMARY}\n
          \n
          <details><summary>Show Summary (only first ${{ inputs.detail_summary_lines }} lines displayed)</summary>\n
          \`\`\`\n
          ${process.env.DETAIL_SUMMARY_CONTENT}
          \`\`\`\n
          </details>\n
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Save Output Variables to JSON
      id: saveoutputjson
      if: steps.apply.outcome == 'success'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -o pipefail
        terraform output -json | grep -v '\:\:debug\:\:' | grep -v '\[command\]' | tee "${OUTPUTJSONFILENAME}"
      continue-on-error: true

    - name: Create Terraform Output JSON Artifact
      uses: actions/upload-artifact@v4
      if: steps.saveoutputjson.outcome == 'success'
      with:
        name: ${{ inputs.artifact_filename }}-output-json
        path: ${{ inputs.artifact_filepath }}-output.json
        if-no-files-found: error        

    - name: Stop on Failure
      if: steps.apply.outcome == 'failure'
      shell: bash
      run: exit 1
